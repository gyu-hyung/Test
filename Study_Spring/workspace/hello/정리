○ 화면에 값을 전달하는 형태
 1. Model
 	- 실행되어질 Method의 파라미터로 Model 타입의 변수를 선언 후 
 	 선언한 변수에 addAttribute로 데이터를 담는다.
 	 :Model타입변수.addAttribute( "속성명" , 저장할 데이터 );
 	 
 2. ModelAndView
 	- ModelAndView는 객체방식으로 작성되고 돌려주기 때문에 인자(값)가 없으며
 	 리턴 데이터형도 ModelAndView임.
 	 그래서 아래와 같이 객체를 생성한 후 데이터는 addObject 로 담는다
 	 ModelAndView = new ModelAndView();
 	 mav.addObject("속성명" , 저장할 데이터);
 	 mav.setViewName("보여질 페이지명"); ex) mav.setViewName("index");
 	 return mav;
  	 
○ 화면을 통해 전달된 파라미터로 접근하는 방법
 	1.HttpServletRequest를 사용
 		- getParameter()를 사용
 	2.@RequestParam 을 사용 ★
 		- 매핑된 메서드의 파라미터로 @RequestParam 지정하여 선언
 		- @RequestParam 생략 가능
 	3.	데이터 객체(DTO/VO)를 사용 ★★ 
 		(스프링에선 주로 VO 용어를 사용, 데이터가 영속성을 가질 떄에 VO)
 		- 매핑된 메서드의 파라미터로 데이터 객체 타입으로 지정하여 선언
 	4.@PathVariable 사용
 		- 요청 경로에 변수 형태로 데이터를 지정하여 선언
 		
 ○ 응답할 화면을 연결하는 형태 : forward, redirect
  1. forward 	( return "home"; )
  	- 요청하는 url과 응답하는 페이지가 서로 다르게 지정할 수 있는 형태
  	- 실제 응답하는 페이지의 url이 아닌 요청하는 url이 유지되는 형태
  2. redirect	( return "redirect:/"; )
  	- 요청하는 url에 해당하는 페이지가 응답하는 형태
  